{
  "cases": [
   
    {
      "extra": {
        "file01": {
          "alt": "Interaktiv graf",
          "url": "/frontend/ewallet.png"
        },
        "file02": {
          "alt": "Loading screen",
          "url": "/frontend/ewallet--loading.png"
        },
        "file03": {
          "alt": "Lägg till nytt: felmeddelande visas.",
          "url": "/frontend/ewallet-error.png"
        }
      },
      "featured": true,
      "id": 1,
      "moreinfo": {
        "languages": [
          {
            "id": "Javascript",
            "value": 59.8
          },
          {
            "id": "CSS",
            "value": 36.6
          },
          {
            "id": "HTML",
            "value": 3.6
          }
        ],
        "teknik": [
          "React",
          "State",
          "Redux",
          "De-structuring",
          "Array methods",
          "React Router",
          "Life cycle hooks",
          "API calls"
        ],
        "text1": "Det görs ett API vid start av applikationen, där jag hämtade en slumpvald användare från sidan https://randomuser.me/api/.",
        "text1part2": "Applikationen skulle ha två routes: /cards och /addcard. I /cards skulle jag visa ett aktivt kort, samt om användaren hade flera kort så skulle dessa finnas listade. Om man ville så skulle man kunna byta aktivt kort.",
        "text1part3": "I /addcard skulle man kunna lägga till ett nytt kort med följande information: Vendor, card number, cardholder, expire month, expire year, CCV. Vi skulle hårdkoda minst tre alternativ för kortutgivare. Förhandsvisning var ett krav.",
        "text2": "Applikationen skulle ha två routes: /cards och /addcard. I /cards skulle jag visa ett aktivt kort, samt om användaren hade flera kort så skulle dessa finnas listade. Om man ville så skulle man kunna byta aktivt kort.",
        "text3": "I /addcard skulle man kunna lägga till ett nytt kort med följande information: Vendor, card number, cardholder, expire month, expire year, CCV. Vi skulle hårdkoda minst tre alternativ för kortutgivare. Förhandsvisning var ett krav."
      },
      "sources": {
        "github": "https://github.com/jertfelt/e-wallet",
        "imgalt": "Aktiva och inaktiva kort",
        "imgurl": "/frontend/ewallet--2.png",
        "link": "https://github.com/jertfelt/e-wallet"
      },
      "sub": "Studentarbete: React + Redux",
      "tag": "Redux",
      "tags": {
        "c1": "Redux",
        "c2": "React CSS Modules",
        "c3": "API"
      },
      "text": "Studentarbete där vi skulle jobba med redux i en react-miljö. Jag skapade en SPA-applikation där användaren kan hantera olika betalkort.  Användarens namn skulle i sin tur hämtas från ett externt API, och vara med på alla kort.",
      "title": "E-wallet"
    },
    {
      "extra": {
        "file01": {
          "alt": "En kurs",
          "url": "/frontend/westcoast_admin2.png"
        },
        "file02": {
          "alt": "Studentportal",
          "url": "/frontend/westcoast_student.png"
        },
        "file03": {
          "alt": "Registrering.",
          "url": "/frontend/westcoast_1.png"
        }
      },
      "featured": true,
      "id": 2,
      "moreinfo": {
        "languages": [
          {
            "id": "Javascript",
            "value": 98.9
          },
          {
            "id": "Other",
            "value": 1.1
          }
        ],
        "teknik": [
          "React",
          "API calls",
          "React context",
          "Jest",
          "Unit testing",
          "Interaction testing",
          "Styled components",
          "React Portals"
        ],
        "text1": "Skoluppgiften gick ut på att skriva testdrivet, här har jag jobbat med unit-testing och viss interaction testing med hjälp av Jest.",
        "text1part2": "Jag har vidare jobbat med styled components, och testat olika filstrukturer. Vidare har jag experimenterat med dark mode/ light mode och tillgänglighet.",
        "text1part3": "Sidan är fortfarande under uppbyggnad och kan ha vissa buggar igång. Jag använde mig av Firebase för att administrera admin-logins, och för att ha en database till studenterna, kurserna och lärare. Här var jag tvungen att läsa på om Firebase funktionalitet. Jag har även valt att hosta hos Netlify. Helt enkelt blev projektet till slut ett fullstack-projekt.",
        "text2": " Jag har vidare jobbat med styled components, och testat olika filstrukturer. Vidare har jag experimenterat med dark mode/ light mode och tillgänglighet.",
        "text3": "Sidan är fortfarande under uppbyggnad och kan ha vissa buggar igång. Jag använde mig av Firebase för att administrera admin-logins, och för att ha en database till studenterna, kurserna och lärare. Här var jag tvungen att läsa på om Firebase funktionalitet. Jag har även valt att hosta hos Netlify. Helt enkelt blev projektet till slut ett fullstack-projekt."
      },
      "sources": {
        "github": "https://github.com/jertfelt/westcoast_education-nyhjs4",
        "imgalt": "Adminportal",
        "imgurl": "/frontend/westcoast_admin.png",
        "link": "https://westcoast-education.netlify.app/"
      },
      "sub": "Studentarbete: TDD i React-miljö",
      "tag": "Jest",
      "tags": {
        "c1": "React",
        "c2": "Jest",
        "c3": "Firebase"
      },
      "text": "Vi skulle bygga en enkel hemsida som skulle visa publicerade kurser, och en admin portal för administratörer på skolan där man kunde logga in och editera (ändra, lägga till) kurser och lärare. Det skulle också gå att knyta ihop lärare och kurser, samt att visa om en kurs var publicerad utifrån att det var tillräckligt många studenter tillagda. Jag byggde även en portal, utöver uppgiften, för studenterna så de kunde anmäla sig till kurser, ändra email eller namn och använda sig av enkel pomofocus-timer på deras profilsida. Allt detta byggdes med TDD i åtanke, där jag från början jobbade med test miljöer i localserver och json server, för att sedan migrera projektet till Netlify och Firebase.",
      "title": "Westcoast Educaton"
    },
    {
      "extra": {
        "file01": {
          "alt": "Konto",
          "url": "/frontend/ekobanken--konto.png"
        },
        "file02": {
          "alt": "Ekobanken",
          "url": "/frontend/ekobanken-screenshot2.png"
        },
        "file03": {
          "alt": "Registrering.",
          "url": "/frontend/ekobanken--screenshotblikund.png"
        }
      },
      "featured": true,
      "id": 3,
      "moreinfo": {
        "languages": [
          {
            "id": "Javascript",
            "value": 32.9
          },
          {
            "id": "SCSS",
            "value": 22.6
          },
          {
            "id": "EJS",
            "value": 4.3
          },
          {
            "id": "HTML",
            "value": 40.2
          }
        ],
        "teknik": [
          "NodeJS",
          "REST",
          "MongoDB",
          "Express",
          "Bcrypt",
          "EJS"
        ],
        "text1": "Min uppgift var att programmera en enkel “bank”, där en användare kan skapa konton, och sätta in, ta ut.Projektet skulle bestå av ett REST-API, samt en frontend som kommunicerar med API:et via Javascript. Kommunikationen mellan API:et och frontend var med JSON. ",
        "text1part2": "Frontenden skulle innehålla följande:  Ett formulär för att lägga till ett nytt konto, med namn och mängd pengar. Kontonumret skall skapas automatiskt (t.ex. Mongos ID, eller https://www.npmjs.com/package/uuid). En lista på alla konton med namn, nummer och mängden pengar. För varje konto skall det vara möjligt att lägga till pengar. För varje konto skall det vara möjligt att ta bort pengar. Det skall gå att ta bort konton.Banken skall vara skyddad så att man måste logga in för att använda den.",
        "text1part3": "Kontofunktioner: Det skall gå att skapa nya användare. Lösenord skall vara krypterade i databasen. Man skall kunna logga in.Man ska inte kunna se konto-information om man inte är inloggad.",
        "text2": "Frontenden skulle innehålla följande:  Ett formulär för att lägga till ett nytt konto, med namn och mängd pengar. Kontonumret skall skapas automatiskt (t.ex. Mongos ID, eller https://www.npmjs.com/package/uuid). En lista på alla konton med namn, nummer och mängden pengar. För varje konto skall det vara möjligt att lägga till pengar. För varje konto skall det vara möjligt att ta bort pengar. Det skall gå att ta bort konton.Banken skall vara skyddad så att man måste logga in för att använda den.",
        "text3": "Kontofunktioner: Det skall gå att skapa nya användare. Lösenord skall vara krypterade i databasen. Man skall kunna logga in.Man ska inte kunna se konto-information om man inte är inloggad."
      },
      "sources": {
        "github": "https://github.com/jertfelt/bankingapp-restAPI-node-mongodb",
        "imgalt": "Designen snodd från ekobanken.se",
        "imgurl": "/frontend/ekobanken--loggedin.png",
        "link": ""
      },
      "sub": "Fullstack och kryptering",
      "tag": "NodeJS",
      "tags": {
        "c1": "mongoDB",
        "c2": "Kryptering",
        "c3": "NodeJS"
      },
      "text": "Jag skulle skapa en säker bank med REST-API, med databas i mongoDB där frontenden kommunicerar med JSON. Utöver detta kunde vi jobba med kryptering och cookies. Designen är rakt av snodd från ekobanken.se ",
      "title": "Ekobanken"
    },
    {
      "extra": {
        "file01": {
          "alt": "Profilsida",
          "url": "/frontend/bookducks--profile.png"
        },
        "file02": {
          "alt": "Logga in som medlem",
          "url": "/frontend/bookducks.png"
        },
        "file03": {
          "alt": "Strapis struktur",
          "url": "/frontend/bookducks-strapi.png"
        }
      },
      "featured": true,
      "id": 4,
      "moreinfo": {
        "languages": [
          {
            "id": "Javascript",
            "value": 50.5
          },
          {
            "id": "SCSS",
            "value": 29.3
          },
          {
            "id": "HTML",
            "value": 19.7
          },
          {
            "id": "Shell",
            "value": 0.5
          }
        ],
        "teknik": [
          "Strapi",
          "Headless CMS",
          "Querystrings",
          "Axios",
          "Postman",
          "SASS",
          "Node.js"
        ],
        "text1": "Instruktioner: Du ska använda Strapi som CMS. Genom CMS-gränssnittet ska man kunna lägga till: 1) En bok med dess titel, författare, antal sidor, betyg samt en bild på bokomslaget. 2) En ljudbok med dess titel, utgivningsdatum, längd, betyg  samt en bild på bokomslaget. 3) Samtliga böcker och ljudböcker ska även vara kopplad till en registrerad användare  som lånar ut boken/ljudboken.  4)  Samtliga böcker och ljudböcker ska även ha en eller flera av följande genrer: Romantik, humor, skräck, barnvänlig, fantasy, sci-fi, action. ",
        "text1part2": "På grund av en bugg i post-funktionen (axios post) så fungerar den inte alltid, response-delen körs inte alltid igång även fast request skickas till servern. Vi tror att det är en bugg som ligger hos strapi, men ej säkert. Detta gör iallafall att vissa funktioner inte alltid är pålitliga, och att mycket tid i projektet gick ut på att felsöka detta problem, istället för att förfina koden.",
        "text1part3": "Användaren ska kunna se en lista på samtliga böcker och ljudböcker som finns tillgängliga för utlåning. Skriv ut samtliga egenskaper för böckerna/ljudböckerna. Skriv även ut kontaktuppgifter för användaren som lånar ut boken/ljudboken (användarnamn samt email). Det ska vara möjligt för en användare att logga in samt registrera sig på sidan. Det ska tydligt framgå om användaren är inloggad i applikationen. Det ska finnas en profilsida - Denna sida ska dock kräva inloggning för att visas. Profilsidan som visar information om användarens användarnamn, email, id, samt vilket datum användaren registrerade sig. Sidan ska även innehålla en lista över samtliga böcker och ljudböcker som användaren har lagt ut för utlåning. Det ska även finnas ytterligare en sida där registrerade användare kan lägga ut böcker och ljudböcker för utlåning. Denna sida ska kräva att användaren är inloggad. Se till att användaren kan lägga till samtliga egenskaper för boken/ljudboken, inklusive bild på bokomslag och genrer.Sidan ska ha ett professionellt utseende.Sidan ska fungera utan några större buggar.",
        "text2": "På grund av en bugg i post-funktionen (axios post) så fungerar den inte alltid, response-delen körs inte alltid igång även fast request skickas till servern. Vi tror att det är en bugg som ligger hos strapi, men ej säkert. Detta gör iallafall att vissa funktioner inte alltid är pålitliga, och att mycket tid i projektet gick ut på att felsöka detta problem, istället för att förfina koden.",
        "text3": "Användaren ska kunna se en lista på samtliga böcker och ljudböcker som finns tillgängliga för utlåning. Skriv ut samtliga egenskaper för böckerna/ljudböckerna. Skriv även ut kontaktuppgifter för användaren som lånar ut boken/ljudboken (användarnamn samt email). Det ska vara möjligt för en användare att logga in samt registrera sig på sidan. Det ska tydligt framgå om användaren är inloggad i applikationen. Det ska finnas en profilsida - Denna sida ska dock kräva inloggning för att visas. Profilsidan som visar information om användarens användarnamn, email, id, samt vilket datum användaren registrerade sig. Sidan ska även innehålla en lista över samtliga böcker och ljudböcker som användaren har lagt ut för utlåning. Det ska även finnas ytterligare en sida där registrerade användare kan lägga ut böcker och ljudböcker för utlåning. Denna sida ska kräva att användaren är inloggad. Se till att användaren kan lägga till samtliga egenskaper för boken/ljudboken, inklusive bild på bokomslag och genrer.Sidan ska ha ett professionellt utseende.Sidan ska fungera utan några större buggar."
      },
      "sources": {
        "github": "https://github.com/jertfelt/bookducks/",
        "imgalt": "Printscreen från bookducks, visar homepage.",
        "imgurl": "/frontend/bookducks--homepage.png",
        "link": ""
      },
      "sub": "Interaktion med CMS",
      "tag": "CMS",
      "tags": {
        "c1": "axios",
        "c2": "strapi",
        "c3": "api"
      },
      "text": "Skoluppgift: Jag skulle ta fram en applikation för ett community som lånar/byter böcker och ljudböcker. Uppgiften var att skapa en frontend som kan kommunicera med en databas jag skapat i CMS-systemet Strapi.",
      "title": "Strapi: Bookducks"
    }
  
  ]
}
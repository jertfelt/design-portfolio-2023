{
  "casesENG": [
    {
      "extra": {
        "file01": {
          "alt": "Ewallet",
          "url": "/frontend/ewallet.png"
        },
        "file02": {
          "alt": "Loading screen",
          "url": "/frontend/ewallet--loading.png"
        },
        "file03": {
          "alt": "Error",
          "url": "/frontend/ewallet-error.png"
        }
      },
      "featured": true,
      "id": 1,
      "moreinfo": {
        "languages": [
          {
            "id": "Javascript",
            "value": 59.8
          },
          {
            "id": "CSS",
            "value": 36.6
          },
          {
            "id": "HTML",
            "value": 3.6
          }
        ],
        "teknik": [
          "React",
          "State",
          "Redux",
          "De-structuring",
          "Array methods",
          "React Router",
          "Life cycle hooks",
          "API calls"
        ],
        "text1": "At the start, an API is called, fetching a random user from here: https://randomuser.me/api/.",
        "text1part2": "The app should have two routes: /cards och /addcard. In /cards I would show an active card, and if the user had more cards they would be shown as well. If user wanted, they could switch active card. In /addcard the user could add a new card with following information: Vendor, card number, cardholder, expire month, expire year, CCV. We also had to code at least three different alternatives for card companies. Preview was a must.",
        "text1part3": "In this project,I worked with redux store and initial states, as well as with css stylings.",
        "text2": "The app should have two routes: /cards och /addcard. In /cards I would show an active card, and if the user had more cards they would be shown as well. If user wanted, they could switch active card. In /addcard the user could add a new card with following information: Vendor, card number, cardholder, expire month, expire year, CCV. We also had to code at least three different alternatives for card companies. Preview was a must.",
        "text3": "In this project,I worked with redux store and initial states, as well as with css stylings."
      },
      "sources": {
        "github": "https://github.com/jertfelt/e-wallet",
        "imgalt": "Active and not active cards",
        "imgurl": "/frontend/ewallet--2.png",
        "link": "https://github.com/jertfelt/e-wallet"
      },
      "sub": "Student work: React + Redux",
      "tag": "Redux",
      "tags": {
        "c1": "Redux",
        "c2": "React CSS Modules",
        "c3": "API"
      },
      "text": "Student assignment where I had to work with Redux in a React environment. I created a SPA-application where the user could handle different types of cards. The user's name would be extracted from an external API, and should be shown on all the cards.",
      "title": "E-wallet"
    },
    {
      "extra": {
        "file01": {
          "alt": "A course",
          "url": "/frontend/westcoast_admin2.png"
        },
        "file02": {
          "alt": "Student site",
          "url": "/frontend/westcoast_student.png"
        },
        "file03": {
          "alt": "Register",
          "url": "/frontend/westcoast_1.png"
        }
      },
      "featured": true,
      "id": 2,
      "moreinfo": {
        "languages": [
          {
            "id": "Javascript",
            "value": 98.9
          },
          {
            "id": "Other",
            "value": 1.1
          }
        ],
        "teknik": [
          "React",
          "API calls",
          "React context",
          "Jest",
          "Unit testing",
          "Interaction testing",
          "Styled components",
          "React Portals"
        ],
        "text1": "The assignment was to write test driven development, and in this scenario I have worked with unit testing and interaction testing with Jest.",
        "text1part2": "I have also chosen to work with styled components, and tested different file structures, as well as dark mode/light mode and accessibility.",
        "text1part3": "The site is still under progress. I have used Firebase to administer the admin logins, and to have a database for the students, courses and teachers. The trick is to cross-reference the different sections, with Firebase functionality. It is hosted on Netlify. ",
        "text2": "I have also chosen to work with styled components, and tested different file structures, as well as dark mode/light mode and accessibility.",
        "text3": "The site is still under progress. I have used Firebase to administer the admin logins, and to have a database for the students, courses and teachers. The trick is to cross-reference the different sections, with Firebase functionality. It is hosted on Netlify. "
      },
      "sources": {
        "github": "https://github.com/jertfelt/westcoast_education-nyhjs4",
        "imgalt": "Admin",
        "imgurl": "/frontend/westcoast_admin.png",
        "link": "https://westcoast-education.netlify.app/"
      },
      "sub": "TDD in React",
      "tag": "Jest",
      "tags": {
        "c1": "React",
        "c2": "Jest",
        "c3": "Firebase"
      },
      "text": "We were assigned to build a simple homepage that would reveal published courses, and an admin page for a school, with courses and teachers. An admin would be able to add courses and teachers, and assign teachers to the courses. The admin page would show courses that were published (with a minimum amount of students), unpublished and what teachers were assigned to the course. I also built a portal for the students where they could assign themselves to existing courses, change their email or name and also have a rudimentary pomofocus-timer on their own profile page. This would be made with TDD in mind, and I have also worked with Netlify and Firebase, migrating test environments from localserver and json server. All in all, it became a fullstack project",
      "title": "Westcoast Education"
    },
    {
      "extra": {
        "file01": {
          "alt": "Account",
          "url": "/frontend/ekobanken--konto.png"
        },
        "file02": {
          "alt": "Ekobanken",
          "url": "/frontend/ekobanken-screenshot2.png"
        },
        "file03": {
          "alt": "Become customer",
          "url": "/frontend/ekobanken--screenshotblikund.png"
        }
      },
      "featured": true,
      "id": 3,
      "moreinfo": {
        "languages": [
          {
            "id": "Javascript",
            "value": 32.9
          },
          {
            "id": "SCSS",
            "value": 22.6
          },
          {
            "id": "EJS",
            "value": 4.3
          },
          {
            "id": "HTML",
            "value": 40.2
          }
        ],
        "teknik": [
          "NodeJS",
          "REST",
          "MongoDB",
          "Express",
          "Bcrypt",
          "EJS"
        ],
        "text1": "My task was to develop a simple “bank”, where a user could create accounts and insert/take out money. The project would be made with a REST-API, and a frontend that communicate with the API through Javascript. The communication would be made with JSON. ",
        "text1part2": "The frontend was to have the following: 1) a form to add a new account, with a name and a sum of money. The account number would be created automatically through for example MongoDB:s ID, or https://www.npmjs.com/package/uuid. 2) A list on all accounts with name, account numbers and the sum of the money. For each account it would be possible to insert/withdraw money, but never more than the sum on the account. The bank should also be protected so that the user has to log in to use it. It was enough that all users could handle all accounts to pass the assignment.",
        "text1part3": "The account: should be possible to add new users. Passwords should be encrypted in the database. A user should be able to log in, and if you are an admin you would see the admin-view.",
        "text2": "The frontend was to have the following: 1) a form to add a new account, with a name and a sum of money. The account number would be created automatically through for example MongoDB:s ID, or https://www.npmjs.com/package/uuid. 2) A list on all accounts with name, account numbers and the sum of the money. For each account it would be possible to insert/withdraw money, but never more than the sum on the account. The bank should also be protected so that the user has to log in to use it. It was enough that all users could handle all accounts to pass the assignment.",
        "text3": "The account: should be possible to add new users. Passwords should be encrypted in the database. A user should be able to log in, and if you are an admin you would see the admin-view."
      },
      "sources": {
        "github": "https://github.com/jertfelt/bankingapp-restAPI-node-mongodb",
        "imgalt": "Design completely taken from Ekobanken.se",
        "imgurl": "/frontend/ekobanken--loggedin.png",
        "link": ""
      },
      "sub": "Fullstack & Encryption",
      "tag": "NodeJS",
      "tags": {
        "c1": "mongoDB",
        "c2": "Encryption",
        "c3": "NodeJS"
      },
      "text": "The assignment was to create a safe bank with REST-API, with a database set up in mongoDB, and where frotnend communicates with JSON. We were also charged with working with cookies, encryption and account authority. ",
      "title": "Ekobank"
    },
    {
      "extra": {
        "file01": {
          "alt": "Profile",
          "url": "/frontend/bookducks--profile.png"
        },
        "file02": {
          "alt": "Log in",
          "url": "/frontend/bookducks.png"
        },
        "file03": {
          "alt": "Strapi",
          "url": "/frontend/bookducks-strapi.png"
        }
      },
      "featured": true,
      "id": 4,
      "moreinfo": {
        "languages": [
          {
            "id": "Javascript",
            "value": 50.5
          },
          {
            "id": "SCSS",
            "value": 29.3
          },
          {
            "id": "HTML",
            "value": 19.7
          },
          {
            "id": "Shell",
            "value": 0.5
          }
        ],
        "teknik": [
          "Strapi",
          "Headless CMS",
          "Querystrings",
          "Axios",
          "Postman",
          "SASS",
          "Node.js"
        ],
        "text1": "We were to use Strapi as CMS. Through the CMS framework we would add 1) A book with title, author, pages, grade and a picture. 2) An augio book with title, publishing date, length, grade and a picture. 3) All books and audio books would be connected to registred users that in turn would be lending out the book. 4) All books would have one or several genres: Romance, humour, children, fantasy, sci-fi, action.",
        "text1part2": "During this project, a bug in axios post makes the project unreliable, the response part is not always running despite request being sent to server. During trouble-solving this bug, documentation leads me to believe that it is a bug within Strapi. This made the project not as polished as I would have hoped, as a lot of time was spent on troubleshooting backend.",
        "text1part3": " The user would be able to see a list of all the books and audio books, fetched from Strapi with axios. Both the books and the users lending out the books should be visible to the visitor. There should also be a possibility to register as a member and a profile page that requires the user to log in.",
        "text2": "During this project, a bug in axios post makes the project unreliable, the response part is not always running despite request being sent to server. During trouble-solving this bug, documentation leads me to believe that it is a bug within Strapi. This made the project not as polished as I would have hoped, as a lot of time was spent on troubleshooting backend.",
        "text3": "The user would be able to see a list of all the books and audio books, fetched from Strapi with axios. Both the books and the users lending out the books should be visible to the visitor. There should also be a possibility to register as a member and a profile page that requires the user to log in."
      },
      "sources": {
        "github": "https://github.com/jertfelt/bookducks/",
        "imgalt": "Printscreen from bookducks",
        "imgurl": "/frontend/bookducks--homepage.png",
        "link": ""
      },
      "sub": "Interaction with CMS",
      "tag": "Headless CMS",
      "tags": {
        "c1": "axios",
        "c2": "strapi",
        "c3": "api"
      },
      "text": "Assignment: To create an application for a community that lends/trades books and audio books. The task at hand was to create a frontend that could communicate with Strapi as the database. ",
      "title": "Strapi: Bookducks"
    },
    {
      "caseHeader":"Studentwork Nackademin"
    }
 
  ]
}
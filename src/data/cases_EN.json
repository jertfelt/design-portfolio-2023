{
  "cases": [
    {
      "extra": {
        "file01": {
          "alt": "Interaktiv graf",
          "url": "/frontend/greenpeace__2.png"
        },
        "file02": {
          "alt": "Text och bild",
          "url": "/frontend/greenpeace__4.png"
        },
        "file03": {
          "alt": "Adminportal med olika funktioner",
          "url": "/frontend/greenpeace__3.png"
        }
      },
      "featured": true,
      "id": 0,
      "moreinfo": {
        "languages": [
          {
            "id": "Javascript",
            "value": 100
          }
        ],
        "teknik": [
          "React",
          "SEO",
          "Array methods",
          "UX",
          "API calls",
          "Graph.JS",
          "NextJS",
          "JSX",
          "Netlify",
          "Styled Components",
          "Firebase"
        ],
        "text1": "Greenpeace ville ha en hemsida som hanterar statistik från SCB och som ska ge en tydligare bild av biobränsle. Det skulle vara sökbart, interaktivt, och enkelt att ta till sig. Utöver frontend-programmering så illustrerade jag även några illustrationer.",
        "text1part2": "Vi jobbade med verktyget GraphJS för att skapa interaktiva grafer för användaren, totalt tre stycken. Datan hämtade vi från bl.a. SCB, och lagrade på vår egen databas i Firebase. Vi byggde även en funktion där användaren kan välja ett år och se datan för det specifika året. Datan uppdateras automatiskt när Naturvårdsverket uppdaterar.",
        "text1part3": "Vi skapade ett eget CMS-system för Greenpeace där de kan gå in och ändra i länkar, bildtexter och texter samt avpublicera/publicera hela sektioner.",
        "text2": "Vi jobbade med verktyget GraphJS för att skapa interaktiva grafer för användaren, totalt tre stycken. Datan hämtade vi från bl.a. SCB, och lagrade på vår egen databas i Firebase. Vi byggde även en funktion där användaren kan välja ett år och se datan för det specifika året. Datan uppdateras automatiskt när Naturvårdsverket uppdaterar.",
        "text3": "Vi skapade ett eget CMS-system för Greenpeace där de kan gå in och ändra i länkar, bildtexter och texter samt avpublicera/publicera hela sektioner."
      },
      "sources": {
        "github": "",
        "imgalt": "Scrollbar hero och animerad svg",
        "imgurl": "/frontend/greenpeace__1.png",
        "link": "https://sverigesutslapp.se"
      },
      "sub": "Responsiv kampanjsida med SEO-perspektiv och interaktiva grafer",
      "tag": "NextJS",
      "tags": {
        "c1": "Netlify",
        "c2": "NextJS",
        "c3": "GraphJS"
      },
      "text": "Projektarbete under min tid som praktikant på Vinnovera. Under drygt 10 veckor så jobbade jag i ett frontend-team där vi pitchade idén och sedan genomförde projektet åt Greenpeace. Tech lead: Jonas Stattin, Vinnovera. UX lead: Per Lundgren. Projektledare: Harald Mellbom. Frontend-utvecklare: Tova Jertfelt, Vidar Rehn.",
      "title": "www.sverigesutslapp.se"
    },
    {
      "extra": {
        "file01": {
          "alt": "Interaktiv graf",
          "url": "/frontend/ewallet.png"
        },
        "file02": {
          "alt": "Loading screen",
          "url": "/frontend/ewallet--loading.png"
        },
        "file03": {
          "alt": "Lägg till nytt: felmeddelande visas.",
          "url": "/frontend/ewallet-error.png"
        }
      },
      "featured": true,
      "id": 1,
      "moreinfo": {
        "languages": [
          {
            "id": "Javascript",
            "value": 59.8
          },
          {
            "id": "CSS",
            "value": 36.6
          },
          {
            "id": "HTML",
            "value": 3.6
          }
        ],
        "teknik": [
          "React",
          "State",
          "Redux",
          "De-structuring",
          "Array methods",
          "React Router",
          "Life cycle hooks",
          "API calls"
        ],
        "text1": "Det görs ett API vid start av applikationen, där jag hämtade en slumpvald användare från sidan https://randomuser.me/api/.",
        "text1part2": "Applikationen skulle ha två routes: /cards och /addcard. I /cards skulle jag visa ett aktivt kort, samt om användaren hade flera kort så skulle dessa finnas listade. Om man ville så skulle man kunna byta aktivt kort.",
        "text1part3": "I /addcard skulle man kunna lägga till ett nytt kort med följande information: Vendor, card number, cardholder, expire month, expire year, CCV. Vi skulle hårdkoda minst tre alternativ för kortutgivare. Förhandsvisning var ett krav.",
        "text2": "Applikationen skulle ha två routes: /cards och /addcard. I /cards skulle jag visa ett aktivt kort, samt om användaren hade flera kort så skulle dessa finnas listade. Om man ville så skulle man kunna byta aktivt kort.",
        "text3": "I /addcard skulle man kunna lägga till ett nytt kort med följande information: Vendor, card number, cardholder, expire month, expire year, CCV. Vi skulle hårdkoda minst tre alternativ för kortutgivare. Förhandsvisning var ett krav."
      },
      "sources": {
        "github": "https://github.com/jertfelt/e-wallet",
        "imgalt": "Aktiva och inaktiva kort",
        "imgurl": "/frontend/ewallet--2.png",
        "link": "https://github.com/jertfelt/e-wallet"
      },
      "sub": "Studentarbete: React + Redux",
      "tag": "Redux",
      "tags": {
        "c1": "Redux",
        "c2": "React CSS Modules",
        "c3": "API"
      },
      "text": "Studentarbete där vi skulle jobba med redux och react.  Jag skapade en SPA-applikation där användaren kan hantera olika betalkort.  Användarens namn skulle i sin tur hämtas från ett externt API, och vara med på alla kort. Jag försökte också jobba med localstorage, på eget iniativ, så man kunde göra en refresh på hemsidan och behålla username och kort.",
      "title": "E-wallet"
    },
    {
      "extra": {
        "file01": {
          "alt": "En kurs",
          "url": "/frontend/westcoast_admin2.png"
        },
        "file02": {
          "alt": "Studentportal",
          "url": "/frontend/westcoast_student.png"
        },
        "file03": {
          "alt": "Registrering.",
          "url": "/frontend/westcoast_1.png"
        }
      },
      "featured": true,
      "id": 2,
      "moreinfo": {
        "languages": [
          {
            "id": "Javascript",
            "value": 98.9
          },
          {
            "id": "Other",
            "value": 1.1
          }
        ],
        "teknik": [
          "React",
          "API calls",
          "React context",
          "Jest",
          "Unit testing",
          "Interaction testing",
          "Styled components",
          "React Portals"
        ],
        "text1": "Skoluppgiften gick ut på att skriva testdrivet, här har jag jobbat med unit-testing och viss interaction testing med hjälp av Jest.",
        "text1part2": " Jag har vidare jobbat med styled components, och testat olika filstrukturer. Vidare har jag experimenterat med dark mode/ light mode och tillgänglighet.",
        "text1part3": "Sidan är fortfarande under uppbyggnad och kan ha vissa buggar igång. Jag håller fortfarande på att skriva klart logiken för studenter, för att lägga till kurs som student, och för att kors-referera lärare, studenter och kurser.",
        "text2": " Jag har vidare jobbat med styled components, och testat olika filstrukturer. Vidare har jag experimenterat med dark mode/ light mode och tillgänglighet.",
        "text3": "Sidan är fortfarande under uppbyggnad och kan ha vissa buggar igång. Jag håller fortfarande på att skriva klart logiken för studenter, för att lägga till kurs som student, och för att kors-referera lärare, studenter och kurser."
      },
      "sources": {
        "github": "https://github.com/jertfelt/westcoast_education-nyhjs4",
        "imgalt": "Adminportal",
        "imgurl": "/frontend/westcoast_admin.png",
        "link": "https://westcoast-education.netlify.app/"
      },
      "sub": "Studentarbete: TDD i React-miljö",
      "tag": "Jest",
      "tags": {
        "c1": "React",
        "c2": "Jest",
        "c3": "Firebase"
      },
      "text": "Vi skulle bygga en adminportal till en skola med kurser och lärare. Jag har även jobbat med Netlify och firebase, och då migrerat från att jobba med localserver och json server. ",
      "title": "Westcoast Educaton"
    },
    {
      "extra": {
        "file01": {
          "alt": "En kurs",
          "url": "/frontend/ekobanken--konto.png"
        },
        "file02": {
          "alt": "Studentportal",
          "url": "/frontend/ekobanken-screenshot2.png"
        },
        "file03": {
          "alt": "Registrering.",
          "url": "/frontend/ekobanken--screenshotblikund.png"
        }
      },
      "featured": true,
      "id": 3,
      "moreinfo": {
        "languages": [
          {
            "id": "Javascript",
            "value": 32.9
          },
          {
            "id": "SCSS",
            "value": 22.6
          },
          {
            "id": "EJS",
            "value": 4.3
          },
          {
            "id": "HTML",
            "value": 40.2
          }
        ],
        "teknik": [
          "NodeJS",
          "REST",
          "MongoDB",
          "Express",
          "Bcrypt",
          "EJS"
        ],
        "text1": "Din uppgift är att programmera en enkel “bank”, där en användare kan skapa konton, och sätta in, ta ut.Projektet skall bestå av ett REST-API, samt en frontend som kommunicerar med API:et via Javascript. Kommunikationen mellan API:et och frontend skall vara med JSON. ",
        "text1part2": "Frontenden skulle innehålla följande:  Ett formulär för att lägga till ett nytt konto, med namn och mängd pengar. Kontonumret skall skapas automatiskt (t.ex. Mongos ID, eller https://www.npmjs.com/package/uuid). En lista på alla konton med namn, nummer och mängden pengar. För varje konto skall det vara möjligt att lägga till pengar. För varje konto skall det vara möjligt att ta bort pengar. OBS! Det skall inte gå att ta bort mer pengar än det finns på kontot! Det skall gå att ta bort konton.Banken skall vara skyddad så att man måste logga in för att använda den. Det räcker med att alla användare kan hantera samma, alltså alla konton; men om du vill får du göra så att varje användare har varsina konton. Om du gör så, behöver du fundera på om du skall knyta ihop konton och användare med referenser (https://www.mongodb.com/docs/manual/tutorial/model-referenced-one-to-many-relationships-between-documents/), eller om du skall ha endast en collection med användare och ha kontona som en del av användar-documentet.",
        "text1part3": "Kontofunktioner: Det skall gå att skapa nya användare.Lösenord skall vara krypterade i databasen.Man skall kunna logga in.Man ska inte kunna se konto-information om man inte är inloggad. Admin-vy när man är inloggad admin (här med alla konton): ",
        "text2": "Frontenden skulle innehålla följande:  Ett formulär för att lägga till ett nytt konto, med namn och mängd pengar. Kontonumret skall skapas automatiskt (t.ex. Mongos ID, eller https://www.npmjs.com/package/uuid). En lista på alla konton med namn, nummer och mängden pengar. För varje konto skall det vara möjligt att lägga till pengar. För varje konto skall det vara möjligt att ta bort pengar. OBS! Det skall inte gå att ta bort mer pengar än det finns på kontot! Det skall gå att ta bort konton.Banken skall vara skyddad så att man måste logga in för att använda den. Det räcker med att alla användare kan hantera samma, alltså alla konton; men om du vill får du göra så att varje användare har varsina konton. Om du gör så, behöver du fundera på om du skall knyta ihop konton och användare med referenser (https://www.mongodb.com/docs/manual/tutorial/model-referenced-one-to-many-relationships-between-documents/), eller om du skall ha endast en collection med användare och ha kontona som en del av användar-documentet.",
        "text3": "Kontofunktioner: Det skall gå att skapa nya användare.Lösenord skall vara krypterade i databasen. Man skall kunna logga in.Man ska inte kunna se konto-information om man inte är inloggad. Admin-vy när man är inloggad admin (här med alla konton): "
      },
      "sources": {
        "github": "https://github.com/jertfelt/bankingapp-restAPI-node-mongodb",
        "imgalt": "Designen snodd från ekobanken.se",
        "imgurl": "/frontend/ekobanken--loggedin.png",
        "link": ""
      },
      "sub": "Fullstack och kryptering",
      "tag": "NodeJS",
      "tags": {
        "c1": "mongoDB",
        "c2": "Kryptering",
        "c3": "NodeJS"
      },
      "text": "Jag skulle skapa en säker bank med REST-API, med databas i mongoDB där frontenden kommunicerar med JSON. Utöver detta kunde vi jobba med kryptering och cookies. Designen är rakt av snodd från ekobanken.se ",
      "title": "Ekobanken"
    },
    {
      "extra": {
        "file01": {
          "alt": "Profilsida",
          "url": "/frontend/bookducks--profile.png"
        },
        "file02": {
          "alt": "Logga in som medlem",
          "url": "/frontend/bookducks.png"
        },
        "file03": {
          "alt": "Strapis struktur",
          "url": "/frontend/bookducks-strapi.png"
        }
      },
      "featured": true,
      "id": 4,
      "moreinfo": {
        "languages": [
          {
            "id": "Javascript",
            "value": 50.5
          },
          {
            "id": "SCSS",
            "value": 29.3
          },
          {
            "id": "HTML",
            "value": 19.7
          },
          {
            "id": "Shell",
            "value": 0.5
          }
        ],
        "teknik": [
          "Strapi",
          "Headless CMS",
          "Querystrings",
          "Axios",
          "Postman",
          "SASS",
          "Node.js"
        ],
        "text1": "Instruktioner: Du ska använda Strapi som CMS. Genom CMS-gränssnittet ska man kunna lägga till: 1) En bok med dess titel, författare, antal sidor, betyg (valfri skala t.ex 1-10), samt en bild på bokomslaget. 2) En ljudbok med dess titel, utgivningsdatum, längd, betyg (valfri skala t.ex 1-10), samt en bild på bokomslaget. 3) Samtliga böcker och ljudböcker ska även vara kopplad till en registrerad användare (som relation, id eller annat sätt) som lånar ut boken/ljudboken. (Du kan skapa upp användare med Strapis inbyggda User-collection type). 4)  Samtliga böcker och ljudböcker ska även ha en eller flera av följande genrer: Romantik, humor, skräck, barnvänlig, fantasy, sci-fi, action. (Skapa en content-type för dina genrer. Du kan också skapa egna genrer om du vill.",
        "text1part2": "På grund av en bugg i post-funktionen (axios post) så fungerar den inte alltid, response-delen körs inte alltid igång även fast request skickas till servern. Vi tror att det är en bugg som ligger hos strapi, men ej säkert. Detta gör iallafall att vissa funktioner inte alltid är pålitliga, och att mycket tid i projektet gick ut på att felsöka detta problem, istället för att förfina koden.",
        "text1part3": "Användaren ska kunna se en lista på samtliga böcker och ljudböcker som finns tillgängliga för utlåning. Skriv ut samtliga egenskaper för böckerna/ljudböckerna. Skriv även ut kontaktuppgifter för användaren som lånar ut boken/ljudboken (användarnamn samt email). Det ska vara möjligt för en användare att logga in samt registrera sig på sidan. Det ska tydligt framgå om användaren är inloggad i applikationen.Det ska finnas en profilsida - Denna sida ska dock kräva inloggning för att visas.  Profilsidan som visar information om användarens användarnamn, email, id, samt vilket datum användaren registrerade sig. Sidan ska även innehålla en lista över samtliga böcker och ljudböcker som användaren har lagt ut för utlåning. Det ska även finnas ytterligare en sida där registrerade användare kan lägga ut böcker och ljudböcker för utlåning. Denna sida ska kräva att användaren är inloggad. Se till att användaren kan lägga till samtliga egenskaper för boken/ljudboken, inklusive bild på bokomslag och genrer.Sidan ska ha ett professionellt utseende.Sidan ska fungera utan några större buggar.",
        "text2": "På grund av en bugg i post-funktionen (axios post) så fungerar den inte alltid, response-delen körs inte alltid igång även fast request skickas till servern. Vi tror att det är en bugg som ligger hos strapi, men ej säkert. Detta gör iallafall att vissa funktioner inte alltid är pålitliga, och att mycket tid i projektet gick ut på att felsöka detta problem, istället för att förfina koden.",
        "text3": "Användaren ska kunna se en lista på samtliga böcker och ljudböcker som finns tillgängliga för utlåning. Skriv ut samtliga egenskaper för böckerna/ljudböckerna. Skriv även ut kontaktuppgifter för användaren som lånar ut boken/ljudboken (användarnamn samt email). Det ska vara möjligt för en användare att logga in samt registrera sig på sidan. Det ska tydligt framgå om användaren är inloggad i applikationen.Det ska finnas en profilsida - Denna sida ska dock kräva inloggning för att visas.  Profilsidan som visar information om användarens användarnamn, email, id, samt vilket datum användaren registrerade sig. Sidan ska även innehålla en lista över samtliga böcker och ljudböcker som användaren har lagt ut för utlåning. Det ska även finnas ytterligare en sida där registrerade användare kan lägga ut böcker och ljudböcker för utlåning. Denna sida ska kräva att användaren är inloggad. Se till att användaren kan lägga till samtliga egenskaper för boken/ljudboken, inklusive bild på bokomslag och genrer.Sidan ska ha ett professionellt utseende.Sidan ska fungera utan några större buggar."
      },
      "sources": {
        "github": "https://github.com/jertfelt/bookducks/",
        "imgalt": "Printscreen från bookducks, visar homepage.",
        "imgurl": "/frontend/bookducks--homepage.png",
        "link": ""
      },
      "sub": "Interaktion med CMS",
      "tag": "CMS",
      "tags": {
        "c1": "axios",
        "c2": "strapi",
        "c3": "api"
      },
      "text": "Skoluppgift: Jag skulle ta fram en applikation för ett community som lånar/byter böcker och ljudböcker. Uppgiften var att skapa en frontend som kan kommunicera med en databas jag skapat i CMS-systemet Strapi.",
      "title": "Strapi: Bookducks"
    },
    {
      "extra": {
        "file01": {
          "alt": "Logga in eller registrera dig",
          "url": "/frontend/ekoline--loggain-2.png"
        },
        "file02": {
          "alt": "Varukorgen",
          "url": "/frontend/ekoline-3.png"
        },
        "file03": {
          "alt": "Produktsida",
          "url": "/frontend/ekoline--produkt.png"
        }
      },
      "featured": true,
      "id": 5,
      "moreinfo": {
        "languages": [
          {
            "id": "Javascript",
            "value": 24.8
          },
          {
            "id": "SCSS",
            "value": 32.8
          },
          {
            "id": "HTML",
            "value": 24.8
          }
        ],
        "teknik": [
          "Localstorage",
          "JSON",
          "Querystrings",
          "Figma",
          "Github Pages"
        ],
        "text1": "Det skall finnas minst 3 produktkategorier.Varje kategori skall innehålla minst 3 produkter. Produkterna skall vara lagrade som JSON. Även kategorierna skall vara lagrade som JSON.Följande sidor skall finnas: Startsida, Produktlista, Produktsida, Varukorg, Beställningssida, Skapa användare, Logga in-sida. Alla sidor skall ha en meny som visar kategorierna och länkar till produktlistan. Länken skall innehålla en querystring som avgör vilka produkter som skall visas. Det ska också finnas en länk till användarregistrering om användaren inte redan är inloggad. Man ska kunna se att man är inloggad och vem det är som är inloggad i menyn, annars en länk till inloggning.",
        "text1part2": "Starsida: Skall innehålla en välkomsttext, samt en lista på kategorierna.Produktlista: En lista på produkterna inom en viss kategori. Produktsida: En detaljvy av produkten. Varukorg: En lista över de produkter användaren valt att köpa, KAN ligga som dropdown i en meny, eller finnas som både separat sida och som dropdown i meny.Beställningssida: En formulärsida där besökaren kan göra en “beställning” och se ett kvitto på beställningen. Skapa användare: En formulärsida där besökaren kan skapa en användare, med vissa preferenser.  Logga in: En formulärsida där besökaren kan logga in.",
        "text1part3": "All sparad användardata skall ligga i local storage (t.ex. varukorg) HTML-koden skall vara semantisk.",
        "text2": "Starsida: Skall innehålla en välkomsttext, samt en lista på kategorierna.Produktlista: En lista på produkterna inom en viss kategori. Produktsida: En detaljvy av produkten. Varukorg: En lista över de produkter användaren valt att köpa, KAN ligga som dropdown i en meny, eller finnas som både separat sida och som dropdown i meny.Beställningssida: En formulärsida där besökaren kan göra en “beställning” och se ett kvitto på beställningen. Skapa användare: En formulärsida där besökaren kan skapa en användare, med vissa preferenser.  Logga in: En formulärsida där besökaren kan logga in.",
        "text3": "All sparad användardata skall ligga i local storage (t.ex. varukorg) HTML-koden skall vara semantisk."
      },
      "sources": {
        "github": "https://github.com/jertfelt/webshop",
        "imgalt": "Printscreen från bookducks, visar homepage.",
        "imgurl": "/frontend/Ekoline--home.png",
        "link": "https://jertfelt.github.io/webshop/"
      },
      "sub": "Grupparbete Nackademin",
      "tag": "localstorage",
      "tags": {
        "c1": "projektarbete",
        "c2": "JSON",
        "c3": "querystrings"
      },
      "text": "Vår grupp hade två veckor på sig att skapa en webbutik med hjälp av localstorage och querystrings. I projektet har vi använt oss av agil projektmetod (kanban och scrum). Jag lajvade tech lead och designer. Vi jobbade också med routing i vår html-fil, tack vare querystrings.",
      "title": "Webshop: Ekoline"
    }
  ]
}